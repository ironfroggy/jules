#!/usr/bin/env python

from __future__ import print_function

import os
import shutil
import operator
import itertools

import yaml

from straight.command import Command, SubCommand, Option
from straight.plugin import load
from jinja2 import Template

import jules
from jules.utils import maybe_call, middleware, ensure_path


class BuildCommand(Command):

    force = Option(short='-f', dest='force', action='store_true')

    def execute(self, **kwargs):
        output_dir = self.parent.args['output']
        if not os.path.exists(output_dir) or self.args['force']:
            if self.args['force']:
                if os.path.exists(output_dir):
                    shutil.rmtree(output_dir)
            os.mkdir(output_dir)

            path = self.parent.args['path']

            engine = jules.JulesEngine(path)
            engine.prepare()
            engine.prepare_bundles()

            for k, bundle in engine.bundles.items():
                render = bundle.meta.get('render')
                if render is not None:
                    if render == 'jinja2':
                        template_name = bundle.meta.get('template')
                        template = None
                        if template_name is not None:
                            template = engine.get_template(template_name)
                        if template is None:
                            template_path = bundle.by_ext('j2')
                            with open(template_path) as f:
                                template = Template(f.read())
                        r = template.render({
                            'meta': bundle.meta,
                            'engine': engine.context,
                        })
                        with open(os.path.join(output_dir, bundle.key) + '.html', 'w') as out:
                            out.write(r)
                    else:
                        raise ValueError("Uknown renderer {}".format(render))
                else:
                    for input_dir, directory, filename in bundle:
                        src_path = os.path.join(input_dir, directory, filename)
                        dest_path = os.path.join(output_dir, directory, filename)
                        ensure_path(dest_path)
                        shutil.copy(src_path, dest_path)
            
        else:
            print("error: Refusing to replace {} output directory!".format(output_dir))


class JulesCommand(Command):

    version = "0.1"

    path = Option(short='-p', dest='path', nargs=1, default='input')
    output = Option(short='-o', long='--output', dest='output', nargs=1, default='output')

    basecopy = SubCommand('build', BuildCommand)

    def get_dir(self, name):
        return os.path.join(self.args['path'], name)


if __name__ == '__main__':
    import sys
    JulesCommand().run(sys.argv[1:])
