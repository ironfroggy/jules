#!/usr/bin/env python

from __future__ import print_function

import os
import shutil
import operator
import itertools

import yaml

from straight.command import Command, SubCommand, Option
from straight.plugin import load

import jules
from jules.utils import maybe_call, middleware 


class BuildCommand(Command):

    version = "0.2"

    force = Option(short='-f', dest='force', action='store_true')

    def execute(self, **kwargs):
        output_dir = self.parent.args['output']
        if not os.path.exists(output_dir) or self.args['force']:
            if self.args['force']:
                if os.path.exists(output_dir):
                    shutil.rmtree(output_dir)
            os.mkdir(output_dir)

            path = self.parent.args['path']

            engine = jules.JulesEngine(path)
            engine.prepare()
            engine.prepare_bundles()
            engine.render_site(output_dir)
            
        else:
            print("error: Refusing to replace {} output directory!".format(output_dir))


class JulesCommand(Command):

    version = "0.2"

    path = Option(short='-p', dest='path', nargs=1, default='input')
    output = Option(short='-o', long='--output', dest='output', nargs=1, default='output')

    basecopy = SubCommand('build', BuildCommand)

    def get_dir(self, name):
        return os.path.join(self.args['path'], name)


if __name__ == '__main__':
    import sys
    JulesCommand().run(sys.argv[1:])
